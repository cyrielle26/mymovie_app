import { useForm } from "react-hook-form";
import { search } from "../../api";
import { useEffect, useState } from "react";
import { MainLayout } from "../../components/MainLayout";
import styled from "styled-components";
import { IMG_URL } from "../../constants";
import { scrollTop } from "../../lib/scrollTop";
import { Swiper, SwiperSlide } from 'swiper/react';
import 'swiper/css';
import { movieRecommendations } from "../../api";
import { useParams } from "react-router-dom";

const Container = styled.div`
width: 100vw;
height: 100%;
`;

const InputWrap = styled.div`
padding-top: 100px;

padding-right: 5%;
height: 7%;
display: flex;
flex-direction: column;
align-items:center;
justify-content: space-between;
`;

const Title = styled.h3`
font-size: 20px;
padding-bottom:20px;
z-index:11;
`;

const Form = styled.form`
z-index:11;
`;

const Input = styled.input`
border-radius: 13px;
padding:5px;
width:260px;
`;

const ConWrap = styled.div`
height: 100%;
 padding: 100px;
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  column-gap: 30px;
  row-gap: 50px;
 
`;

const SearchResultsTitle = styled.h3`
padding-left: 100px;
font-size: 20px;
margin-bottom: 25px;`;

const Con = styled.div``;

const Bg = styled.div`
  height: 300px;
  background: url(${IMG_URL}/w500/${(props) => props.$bgUrl}) no-repeat center /
    cover;
`;

const MovieTitle = styled.div``;

const SuggestionContainer = styled.div``;
const SuggestionTitle= styled.div``;
const CoverBg= styled.div``;

const SerieTitle= styled.div``;



const params = {
  slidesPerView: 5.5,
  spaceBetween: 20,
  breakpoints: {
      // when window width is >=  1024px
      1024: {
          slidesPerView: 5.5,
          spaceBetween: 20
      },
      // when window width is >= 640px
      640: {
          slidesPerView: 4.3,
          spaceBetween: 15
      },
      // when window width is >= 320px
      320: {
          slidesPerView: 3.2,
          spaceBetween: 10
      },
     
  }
}

export const Search = () => {

    
  const {
    register,
    handleSubmit,
  } = useForm({
    mode: "onSubmit",
  });

  
  const [term, setTerm] = useState();
  const [movieResults, setMovieResults] = useState();
  const [tvResults, setTvResults] = useState();
  const [suggestionData, setSuggestionData] = useState();
  const [searchResults, setSearchResults] = useState([]);
  const { id } = useParams();

  scrollTop();



//search Handler
  const searchHandler = async (data) => {
    const { search: keyword } = data;
    
    try {
      const { results: movieResults } = await search('movie', keyword);
      setMovieResults(movieResults);
      const { results: tvResults } = await search('tv', keyword);
      setTvResults(tvResults);

      setTerm(keyword);

    } catch (error) {
      console.log(error);
    }

  };

    // Function to handle term change
    const handleTermChange = (event) => {
      setTerm(event.target.value);
  };
  

// Fetch movie recommendations based on the latest search result
useEffect(() => {
  const fetchRecommendations = async () => {
    try {
      if (movieResults && movieResults.length > 0) {
        // Get the latest movie result
        const latestMovieResult = movieResults[movieResults.length - 1];
        const data = await movieRecommendations(latestMovieResult.id);
        setSuggestionData(data);
      } else {
        // Clear the suggestion data if there are no search results
        setSuggestionData(null);
      }
    } catch (error) {
      console.error("Error fetching recommendations:", error);
    }
  };

  // Call the fetchRecommendations function
  fetchRecommendations();
}, [movieResults]);



  




  return (
    <Container>
      <InputWrap>
      <Title>Anything in mind?</Title>
      <Form onSubmit={handleSubmit(searchHandler)}  onChange={handleTermChange}>
        <Input
          {...register("search", {
            required: "researched content here.",
          })}
          type="text"
            placeholder="Movie, show..."
        />
      </Form>
      </InputWrap>

      <MainLayout>
        {Array.isArray(term) && term.length > 0 && (
          <>
          <SearchResultsTitle>Search Results</SearchResultsTitle>
          <ConWrap>
            {term.map((data) => (
            
              <Con key={data.id}>
                <Bg   $bgUrl={
    data.backdrop_path
      ? `${IMG_URL}/w500/${data.backdrop_path}`
      : 'https://congtygiaphat104.com/template/Default/img/no.png'
  }/>
                
                
                <MovieTitle>{data.title}</MovieTitle>
              </Con>
              ))}
              </ConWrap>
          

<SuggestionContainer>
<SuggestionTitle>You may also like...</SuggestionTitle>
        <Swiper  {...params} >
            {suggestionData.results.map((data) => (
                <SwiperSlide key={data.id}>
                    {/* <Link to={`/movie/${data.id}`}> */}
                        <CoverBg $bgUrl={data.poster_path} />
                        <MovieTitle>{data.title}</MovieTitle>
                        <SerieTitle>{data.name}</SerieTitle>
                       
                    {/* </Link> */}
                </SwiperSlide>
            ))}
        </Swiper>             
</SuggestionContainer>
           

            </>
        )}

    
      </MainLayout>
    </Container>
  );
};